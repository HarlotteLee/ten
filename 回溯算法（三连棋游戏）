#include <stdio.h>

typedef char BoardType[3][3];

#define Draw 0
#define ComWin 1
#define ComLoss -1

void FindComMove(BoardType Board, int *BestMove, int *Value, int Alpha, int Beta)
{
	int Dc, i, j, Response;

	if (FullBoard(Board))
		*Value = Draw;
	else if (ImmediateHumanWin(Board))
		*Value = ComLoss;
	else
	{
		*Value = Alpha;
		for (i = 0; i < 9 && *Value < Beta; i++)
		{

			if (IsEmpty(Board, i / 3, i % 3))
			{
				Place(Board, i / 3, i % 3, 'C');
				FindHumanMove(Board, &Dc, &Response, *Value, Beta);
				Unplace(Board, i / 3, i % 3);

				if (Response > *Value)
				{
					*Value = Response;
					*BestMove = i;
				}
			}
		}
	}
}

void FindHumanMove(BoardType Board, int *BestMove, int *Value, int Alpha, int Beta)
{
	int Dc, i, j, Response;

	if (FullBoard(Board))
		*Value = Draw;
	else if (ImmediateComWin(Board))
		*Value = ComWin;
	else
	{
		*Value = Beta;
		for (i = 0; i<9 && *Value > Alpha; i++)
		{

			if (IsEmpty(Board, i / 3, i % 3))
			{
				Place(Board, i / 3, i % 3, 'H');
				FindComMove(Board, &Dc, &Response, Alpha, *Value);
				Unplace(Board, i / 3, i % 3);

				if (Response < *Value)
				{
					*Value = Response;
					*BestMove = i;
				}
			}
		}
	}
}

int FullBoard(BoardType Board)
{
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 3; j++)
			if (Board[i][j] == ' ')
				return 0;

	return 1;

}

int ImmediateHumanWin(BoardType Board)
{
	if (Board[0][0] == 'H' && Board[0][0] == Board[0][1] && Board[0][1] == Board[0][2])
	{
		return 1;
	}
	if (Board[1][0] == 'H' &&Board[1][0] == Board[1][1] && Board[1][1] == Board[1][2])
	{
		return 1;
	}
	if (Board[2][0] == 'H' && Board[2][0] == Board[2][1] && Board[2][1] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][0] == 'H' && Board[0][0] == Board[1][0] && Board[1][0] == Board[2][0])
	{
		return 1;
	}
	if (Board[0][1] == 'H' && Board[0][1] == Board[1][1] && Board[1][1] == Board[2][1])
	{
		return 1;
	}
	if (Board[0][2] == 'H' && Board[0][2] == Board[1][2] && Board[1][2] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][0] == 'H' && Board[0][0] == Board[1][1] && Board[1][1] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][2] == 'H' && Board[0][2] == Board[1][1] && Board[1][1] == Board[2][0])
	{
		return 1;
	}
	return 0;
}

int ImmediateComWin(BoardType Board)
{
	if (Board[0][0] == 'C' && Board[0][0] == Board[0][1] && Board[0][1] == Board[0][2])
	{
		return 1;
	}
	if (Board[1][0] == 'C' &&Board[1][0] == Board[1][1] && Board[1][1] == Board[1][2])
	{
		return 1;
	}
	if (Board[2][0] == 'C' && Board[2][0] == Board[2][1] && Board[2][1] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][0] == 'C' && Board[0][0] == Board[1][0] && Board[1][0] == Board[2][0])
	{
		return 1;
	}
	if (Board[0][1] == 'C' && Board[0][1] == Board[1][1] && Board[1][1] == Board[2][1])
	{
		return 1;
	}
	if (Board[0][2] == 'C' && Board[0][2] == Board[1][2] && Board[1][2] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][0] == 'C' && Board[0][0] == Board[1][1] && Board[1][1] == Board[2][2])
	{
		return 1;
	}
	if (Board[0][2] == 'C' && Board[0][2] == Board[1][1] && Board[1][1] == Board[2][0])
	{
		return 1;
	}
	return 0;
}

int IsEmpty(BoardType Board, int i, int j)
{
	return Board[i][j] == ' ';
}

void Place(BoardType Board, int i, int j, char value)
{
	Board[i][j] = value;
}

void Unplace(BoardType Board, int i, int j)
{
	Board[i][j] = ' ';
}


void manFirst()
{
	BoardType Board = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
	int BestStep = -1;
	int Value;
	int Result = -2;
	int humanstep;
	while (Result == -2)
	{
		printf( "now the board is:\n");
		DrawBoard(Board);

		do
		{
			printf("please choose your step: ");
			scanf("%d", humanstep);
			humanstep -= 1;
		} while (!IsEmpty(Board, humanstep / 3, humanstep % 3));

		Place(Board, humanstep / 3, humanstep % 3, 'H');
		if (ImmediateHumanWin(Board))
			Result = -1;

		else if (!FullBoard(Board))
		{
			FindComMove(Board, &BestStep, &Value, -1, 1);
			//	FindComMove(Board, &BestStep, &Value);
			Place(Board, BestStep / 3, BestStep % 3, 'C');
			if (ImmediateComWin(Board))
				Result = 1;
		}
		else
			Result = 0;
	}
	printf( "game over!");
	DrawBoard(Board);
}



void comFirst()
{
	BoardType Board = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
	int BestStep = -1;
	int Value;
	int Result = -2;
	int humanstep;
	int firststep = random();

	Place(Board, 2 * firststep / 3, 2 * firststep % 3, 'C');

	while (Result == -2)
	{
		if (!FullBoard(Board))
		{
			printf( "now the board is:\n");
			DrawBoard(Board);

			do
			{
				printf( "please choose your step: " );
				+ humanstep ;
				humanstep -= 1;
			} while (!IsEmpty(Board, humanstep / 3, humanstep % 3));

			Place(Board, humanstep / 3, humanstep % 3, 'H');
			if (ImmediateHumanWin(Board))
				Result = -1;

			else
			{
				FindComMove(Board, &BestStep, &Value, -1, 1);
				//	FindComMove(Board, &BestStep, &Value);
				Place(Board, BestStep / 3, BestStep % 3, 'C');
				if (ImmediateComWin(Board))
					Result = 1;
			}
		}
		else
			Result = 0;
	}
	printf( "game over!" );
	DrawBoard(Board);
}

void DrawBoard(BoardType Board)
{
	printf("\n-------------\n| %c | %c | %c |\n-------------\n| %c | %c | %c |\n-------------\n| %c | %c | %c |\n-------------\n"
		, Board[0][0], Board[0][1], Board[0][2], Board[1][0], Board[1][1], Board[1][2], Board[2][0], Board[2][1], Board[2][2]);
}

int random()
{
	return rand() % 5;
}
int main()
{
	char game = ' ';
	while (game != 'n' && game != 'N')
	{
		printf( "you wanna play a game? y/n: ");
		scanf("%c", game);
		if (game == 'y' || game == 'Y')
		{
			srand(time(NULL));
			char first;
			printf("you wanna play first?  y/n: ");
			scanf("%c",first);

			if (first == 'y' || first == 'Y')
				manFirst();
			else
				comFirst();
		}
	}
}
